[
  {
    "objectID": "Workshops/Fundamentals.html",
    "href": "Workshops/Fundamentals.html",
    "title": "Fundamentals",
    "section": "",
    "text": "Python is a programming language that can be used to build programs (i.e. a “general programming language”), but it can also be used to analyse data by importing a number of useful modules.\nWe are using Spyder to interact with Python more comfortably. If you have used RStudio to interact with R before, you should feel right at home: Spyder is a program designed for doing data science with Python.\nPython can be used interactively in a console, or we can build scripts and programs with it, making the most out of Spyder’s code editor.\nWe will start by using the “Console” to work interactively.\n\n\n\nTo start with, we can use Python like a calculator. Type the following commands in the console, and press Enter to execute them:\n1 + 1\n2 * 3\n4 / 10\nAfter running each command, you should see the result as an output.\n\n\n\nVariables will store data. We need to give them a name, and assign a value to them with the = operator. For example:\nfavNumber = 42\nOne way to think of this is like making a box called “favNumber” and putting the number 42 inside:\nYou can then retrieve the value by running the variable name on its own:\nfavNumber\nLet’s create more variable, and reuse them:\notherNumber = 5.678\nprod1 = favNumber * otherNumber\nsentence = 'Hello world!'\n\nSpyder helps us with extra panels and features apart from the Console. To see what variables you have created, look at the “Variable explorer” tab in the top right.\n\n\n\n\nVariables have different types. The most common are int for integers, float for decimals and string for strings of characters.\n\nYou can see the type of your existing variables in the Variable explorer.\n\nWe can also create lists, which will store several variables (not necessarily of the same type). We need to use square brackets for that:\nmyList = [1, 6, 4, 3, 9]\ndiverse = [3, 'Hi!', 9.0]\nLists are very flexible as they can contain any number of items, and any type of data. You can even nest lists inside a list, which makes for a very flexible data type.\nOperators give different results depending on types. For example, we can use the * and + operators to repeat and append strings and lists:\nsentence + ' How are you?'\nmyList + diverse\n3 * myList\nHowever, depending on the variable, some operations won’t work:\nsentence + favNumber\nThere are other data types like booleans, tuples, dictionaries and sets, but we won’t get into details today.\n\n\nIndexing is useful to get only a part of a variable. In Python, indexing starts at 0. For example, see what these commands return:\nsentence[0]\nsentence[6]\nmyList[4]\nYou can use a range to index, but note that it will not include the upper bound in the returned values. For example:\nmyList[0:4]\nThat command returns “elements from position 0 up to - but not including! - position 4.”\n\n\n\n\nFunctions are little programs that do specific jobs. Here are a few examples of built-in functions:\nlen(myList)\nmin(myList)\nmax(myList)\nsum(myList)\nround(otherNumber)\nFunctions always have parentheses behind their name, and they can take one or several arguments, or none at all, depending on what they can do, and how the user wants to use them.\nHere, we use two arguments to modify the default behaviour of the round() function:\nround(otherNumber, 2)\n\nNotice how Spyder gives you hints about the available arguments after typing the function name?\n\n\n\n\nTo find help about a function, you can use the help() function, or a ? after a function name:\nhelp(max)\nprint?\nIn Spyder, you can use the Ctrl + I keyboard shortcut to open the help in a separate pane.\nFor a comprehensive manual, go to the official online documentation.\nFor questions and answers, typing the right question in a search engine will usually lead you to something helpful. If you can’t find an answer, StackOverflow is a great Q&A community.\n\n\n\nTo do more with Python, you could write new functions from scratch, but it is easier to import extra modules to extend its capabilities. For example, to access the pi constant:\npi # throws an error: it does not exist!\nimport math # this module contains the pi constant\nmath.pi # we have to specify where it comes from\nimport math as m # give a shorter name\nm.pi\nfrom math import pi # only import what is necessary\npi\nmath is part of the “Python standard library”. You can see all the functions and constants available in the math module here: https://docs.python.org/3/library/math.html\nPython distributions like Anaconda already come with a number of useful extra modules for science.\n\n\nTo install more modules, you might need to use pip (on most systems) or conda (if you use Anaconda or Miniconda) from the command line.\nWith pip, which will fetch the module from the Python Package Index (PyPI):\npip install some-module\nWith conda, which will fetch the module from the Anaconda repository:\nconda install some-module\nRefer to the module’s website to find what is recommended.\nHere, we present a few modules that are very important for data science with Python, and which are already available in the Anaconda distribution.\n\n\n\nArrays are a data type introduced by numpy, a module with many functions useful for numerical computing.\nFor example, you can convert the list we created before to then do mathematical operations on each one of its elements:\nimport numpy as np\nmyArray = np.array(myList)\nmyArray * 2\n\n\n\npandas introduces dataframes, which are often used to store two-dimensional datasets with different kinds of variables in each column. If your data is stored as a spreadsheet, you probably want to import it with a pandas function.\nHere is an example of creating a pandas dataframe from scratch, populating it by hand:\nimport pandas as pd\ndf = pd.DataFrame(columns=['Name', 'Age'])\n# populate the dataframe:\ndf.loc[1] = 'Josephine', 70\ndf.loc[2] = 'Dilsah', 38\ndf\ndf.Age # access a specific variable\n\nYou can double-click on a dataframe in the Variable explorer to explore it in a separate window.\n\n\n\n\nmatplotlib is a large collection of data visualisation functions, and pyplot is a submodule of matplotlib that contains essentials.\nimport matplotlib.pyplot as plt\nplt.plot(myList)\nThis shows a plot in the Plots tab of Spyder.\n\nIn a Python shell, you might have to use the plt.show() command to show the plot.\n\nThe default look is a line plot that joins all the points, but we can style a plot with only a few characters:\n# blue circles\nplt.plot(myList, 'bo')\n# green squares, dashed line:\nplt.plot(myList, 'gs--')\nExtra arguments can be used to style further:\n# red, diamonds, solid line; change width of line and size of diamonds:\nplt.plot(myList, 'rd-', linewidth=3, markersize=10)\nTo find out about the styling shorthand and all other arguments, look at the documentation:\nplt.plot?\n\n\n\n\nA project is useful to keep everything related to one job all contained in one directory.\n\n\nCreate a project with Projects &gt; New project.... You can name this one “python_intro” for example.\n\n\n\nA script is a simple text file that contains code. It is useful to:\n\nwrite code more comfortably\nstore clearly defined steps in a chronological order\nshare a process with peers easily\nmake your work reproducible\n\nClick on the “New file” icon, and save it as “process.py” in your project directory.\nRemember to add comments (they start with the # symbol) to document your work: this will be useful if you share your work with others, or even for your future self!\nTo execute something from the script (the current line, or a selected block), use the F9 keyboard shortcut (or the white “Run” button).\n\n\n\nIt is possible to read a CSV file with a pandas function.\n\n\nHave a look at the documentation for the read_csv() function:\nimport pandas as pd\npd.read_csv?\nHow could you use it to store the following dataset into a variable?\nhttps://raw.githubusercontent.com/resbaz/r-novice-gapminder-files/master/data/gapminder-FiveYearData.csv\n\n\n\nWe have to create a variable, and store the output of the function inside it. No need to download the file first: read_csv() can read from a URL!\ngap = pd.read_csv('https://raw.githubusercontent.com/resbaz/r-novice-gapminder-files/master/data/gapminder-FiveYearData.csv')\n\npandas contains many functions for interpreting a variety of file formats. Start typing pd.read_ to see what is available.\n\nNow that we have stored our dataset as a variable, we can print the dataset to the console:\ngap\nThe console conveniently shows us only the beginning and end of the dataframe.\nWe can also use the “dot notation” to create commands that are useful to explore the data:\ngap.shape # size of the dataframe (an attribute)\ngap.head() # first few rows (a method)\ngap.head(10) # change the behaviour of the method\ngap.tail() # last few rows\ngap.country # single variable\nVariables have attributes and methods attached to them, depending on the data type. Here, shape is an attribute, i.e. a static characteristic of the variable, whereas head() is a method, i.e. a function that can often take arguments.\n\n\n\n\nLet’s now learn a bit more about our data. The describe() method gives us summary statistics for our numerical data:\ngap.describe()\nTo create a customised summary, we can string different methods one after the other. Here, we first group by year to then get the yearly mean of the numerical columns, using True to indicate that we only want to consider the numeric columns:\ngap.groupby('year').mean(True)\n\n\n\nWe can visualise our data with matplotlib. First, let’s visualise the relationship between gross domestic product per capita (gdpPercap) and life expectancy (lifeExp) with a scatterplot:\nimport matplotlib.pyplot as plt\nplt.plot(gap.gdpPercap, gap.lifeExp, 'g.')\nWe add the data as two arguments, which are understood as what we put on the x and y axes respectively.\nWe can now add labels with extra functions:\nplt.plot(gap.gdpPercap, gap.lifeExp, 'g.')\nplt.xlabel('GDP per capita (USD)')\nplt.ylabel('Life expectancy (years)')\n\nMake sure that you execute all the lines of code that relate to one plot together. When you need to execute many lines together, you might want to start using cells in your script: you can start a new cell with a #%% line, and execute the current cell with the keyboard shortcut Ctrl + Enter.\n\n\n\nYou can save you plots as PNG by right-clicking on them. To save automatically with some code, you can add the following line to the visualisation block:\nplt.savefig('gdp_vs_life_exp.pdf')\nA PDF is a great option for a visualisation in vector format.\nYou can change the extension in the filename to save in a different format. For example, for a PNG file with a higher definition than the default:\nplt.savefig('gdp_vs_life_exp.png', dpi=600)\n\n\n\n\nHow can we reuse previous code to visualise how mean life expectancy evolved over the years?\nTry changing the look of the plot to a magenta dotted line.\n\n\n\n\nWe can reuse the same summary as before, but adding the attribute of the right column we are interested in:\nplt.plot(gap.groupby('year').mean().lifeExp, 'm:')\n\n\n\n\n\nYour project can be reopened from the “Projects” menu in Spyder.\nBy default, your variables are not saved, which is another reason why working with a script is important: you can execute the whole script in one go to get everything back. You can however save your variables as a .spydata file if you want to (for example, if it takes a lot of time to process your data).",
    "crumbs": [
      "Workshops",
      "Fundamentals"
    ]
  },
  {
    "objectID": "Workshops/Fundamentals.html#introducing-python-and-spyder",
    "href": "Workshops/Fundamentals.html#introducing-python-and-spyder",
    "title": "Fundamentals",
    "section": "",
    "text": "Python is a programming language that can be used to build programs (i.e. a “general programming language”), but it can also be used to analyse data by importing a number of useful modules.\nWe are using Spyder to interact with Python more comfortably. If you have used RStudio to interact with R before, you should feel right at home: Spyder is a program designed for doing data science with Python.\nPython can be used interactively in a console, or we can build scripts and programs with it, making the most out of Spyder’s code editor.\nWe will start by using the “Console” to work interactively.",
    "crumbs": [
      "Workshops",
      "Fundamentals"
    ]
  },
  {
    "objectID": "Workshops/Fundamentals.html#operators",
    "href": "Workshops/Fundamentals.html#operators",
    "title": "Fundamentals",
    "section": "",
    "text": "To start with, we can use Python like a calculator. Type the following commands in the console, and press Enter to execute them:\n1 + 1\n2 * 3\n4 / 10\nAfter running each command, you should see the result as an output.",
    "crumbs": [
      "Workshops",
      "Fundamentals"
    ]
  },
  {
    "objectID": "Workshops/Fundamentals.html#variables",
    "href": "Workshops/Fundamentals.html#variables",
    "title": "Fundamentals",
    "section": "",
    "text": "Variables will store data. We need to give them a name, and assign a value to them with the = operator. For example:\nfavNumber = 42\nOne way to think of this is like making a box called “favNumber” and putting the number 42 inside:\nYou can then retrieve the value by running the variable name on its own:\nfavNumber\nLet’s create more variable, and reuse them:\notherNumber = 5.678\nprod1 = favNumber * otherNumber\nsentence = 'Hello world!'\n\nSpyder helps us with extra panels and features apart from the Console. To see what variables you have created, look at the “Variable explorer” tab in the top right.",
    "crumbs": [
      "Workshops",
      "Fundamentals"
    ]
  },
  {
    "objectID": "Workshops/Fundamentals.html#data-types",
    "href": "Workshops/Fundamentals.html#data-types",
    "title": "Fundamentals",
    "section": "",
    "text": "Variables have different types. The most common are int for integers, float for decimals and string for strings of characters.\n\nYou can see the type of your existing variables in the Variable explorer.\n\nWe can also create lists, which will store several variables (not necessarily of the same type). We need to use square brackets for that:\nmyList = [1, 6, 4, 3, 9]\ndiverse = [3, 'Hi!', 9.0]\nLists are very flexible as they can contain any number of items, and any type of data. You can even nest lists inside a list, which makes for a very flexible data type.\nOperators give different results depending on types. For example, we can use the * and + operators to repeat and append strings and lists:\nsentence + ' How are you?'\nmyList + diverse\n3 * myList\nHowever, depending on the variable, some operations won’t work:\nsentence + favNumber\nThere are other data types like booleans, tuples, dictionaries and sets, but we won’t get into details today.\n\n\nIndexing is useful to get only a part of a variable. In Python, indexing starts at 0. For example, see what these commands return:\nsentence[0]\nsentence[6]\nmyList[4]\nYou can use a range to index, but note that it will not include the upper bound in the returned values. For example:\nmyList[0:4]\nThat command returns “elements from position 0 up to - but not including! - position 4.”",
    "crumbs": [
      "Workshops",
      "Fundamentals"
    ]
  },
  {
    "objectID": "Workshops/Fundamentals.html#functions",
    "href": "Workshops/Fundamentals.html#functions",
    "title": "Fundamentals",
    "section": "",
    "text": "Functions are little programs that do specific jobs. Here are a few examples of built-in functions:\nlen(myList)\nmin(myList)\nmax(myList)\nsum(myList)\nround(otherNumber)\nFunctions always have parentheses behind their name, and they can take one or several arguments, or none at all, depending on what they can do, and how the user wants to use them.\nHere, we use two arguments to modify the default behaviour of the round() function:\nround(otherNumber, 2)\n\nNotice how Spyder gives you hints about the available arguments after typing the function name?",
    "crumbs": [
      "Workshops",
      "Fundamentals"
    ]
  },
  {
    "objectID": "Workshops/Fundamentals.html#finding-help",
    "href": "Workshops/Fundamentals.html#finding-help",
    "title": "Fundamentals",
    "section": "",
    "text": "To find help about a function, you can use the help() function, or a ? after a function name:\nhelp(max)\nprint?\nIn Spyder, you can use the Ctrl + I keyboard shortcut to open the help in a separate pane.\nFor a comprehensive manual, go to the official online documentation.\nFor questions and answers, typing the right question in a search engine will usually lead you to something helpful. If you can’t find an answer, StackOverflow is a great Q&A community.",
    "crumbs": [
      "Workshops",
      "Fundamentals"
    ]
  },
  {
    "objectID": "Workshops/Fundamentals.html#modules",
    "href": "Workshops/Fundamentals.html#modules",
    "title": "Fundamentals",
    "section": "",
    "text": "To do more with Python, you could write new functions from scratch, but it is easier to import extra modules to extend its capabilities. For example, to access the pi constant:\npi # throws an error: it does not exist!\nimport math # this module contains the pi constant\nmath.pi # we have to specify where it comes from\nimport math as m # give a shorter name\nm.pi\nfrom math import pi # only import what is necessary\npi\nmath is part of the “Python standard library”. You can see all the functions and constants available in the math module here: https://docs.python.org/3/library/math.html\nPython distributions like Anaconda already come with a number of useful extra modules for science.\n\n\nTo install more modules, you might need to use pip (on most systems) or conda (if you use Anaconda or Miniconda) from the command line.\nWith pip, which will fetch the module from the Python Package Index (PyPI):\npip install some-module\nWith conda, which will fetch the module from the Anaconda repository:\nconda install some-module\nRefer to the module’s website to find what is recommended.\nHere, we present a few modules that are very important for data science with Python, and which are already available in the Anaconda distribution.\n\n\n\nArrays are a data type introduced by numpy, a module with many functions useful for numerical computing.\nFor example, you can convert the list we created before to then do mathematical operations on each one of its elements:\nimport numpy as np\nmyArray = np.array(myList)\nmyArray * 2\n\n\n\npandas introduces dataframes, which are often used to store two-dimensional datasets with different kinds of variables in each column. If your data is stored as a spreadsheet, you probably want to import it with a pandas function.\nHere is an example of creating a pandas dataframe from scratch, populating it by hand:\nimport pandas as pd\ndf = pd.DataFrame(columns=['Name', 'Age'])\n# populate the dataframe:\ndf.loc[1] = 'Josephine', 70\ndf.loc[2] = 'Dilsah', 38\ndf\ndf.Age # access a specific variable\n\nYou can double-click on a dataframe in the Variable explorer to explore it in a separate window.\n\n\n\n\nmatplotlib is a large collection of data visualisation functions, and pyplot is a submodule of matplotlib that contains essentials.\nimport matplotlib.pyplot as plt\nplt.plot(myList)\nThis shows a plot in the Plots tab of Spyder.\n\nIn a Python shell, you might have to use the plt.show() command to show the plot.\n\nThe default look is a line plot that joins all the points, but we can style a plot with only a few characters:\n# blue circles\nplt.plot(myList, 'bo')\n# green squares, dashed line:\nplt.plot(myList, 'gs--')\nExtra arguments can be used to style further:\n# red, diamonds, solid line; change width of line and size of diamonds:\nplt.plot(myList, 'rd-', linewidth=3, markersize=10)\nTo find out about the styling shorthand and all other arguments, look at the documentation:\nplt.plot?",
    "crumbs": [
      "Workshops",
      "Fundamentals"
    ]
  },
  {
    "objectID": "Workshops/Fundamentals.html#example-project",
    "href": "Workshops/Fundamentals.html#example-project",
    "title": "Fundamentals",
    "section": "",
    "text": "A project is useful to keep everything related to one job all contained in one directory.\n\n\nCreate a project with Projects &gt; New project.... You can name this one “python_intro” for example.\n\n\n\nA script is a simple text file that contains code. It is useful to:\n\nwrite code more comfortably\nstore clearly defined steps in a chronological order\nshare a process with peers easily\nmake your work reproducible\n\nClick on the “New file” icon, and save it as “process.py” in your project directory.\nRemember to add comments (they start with the # symbol) to document your work: this will be useful if you share your work with others, or even for your future self!\nTo execute something from the script (the current line, or a selected block), use the F9 keyboard shortcut (or the white “Run” button).\n\n\n\nIt is possible to read a CSV file with a pandas function.\n\n\nHave a look at the documentation for the read_csv() function:\nimport pandas as pd\npd.read_csv?\nHow could you use it to store the following dataset into a variable?\nhttps://raw.githubusercontent.com/resbaz/r-novice-gapminder-files/master/data/gapminder-FiveYearData.csv\n\n\n\nWe have to create a variable, and store the output of the function inside it. No need to download the file first: read_csv() can read from a URL!\ngap = pd.read_csv('https://raw.githubusercontent.com/resbaz/r-novice-gapminder-files/master/data/gapminder-FiveYearData.csv')\n\npandas contains many functions for interpreting a variety of file formats. Start typing pd.read_ to see what is available.\n\nNow that we have stored our dataset as a variable, we can print the dataset to the console:\ngap\nThe console conveniently shows us only the beginning and end of the dataframe.\nWe can also use the “dot notation” to create commands that are useful to explore the data:\ngap.shape # size of the dataframe (an attribute)\ngap.head() # first few rows (a method)\ngap.head(10) # change the behaviour of the method\ngap.tail() # last few rows\ngap.country # single variable\nVariables have attributes and methods attached to them, depending on the data type. Here, shape is an attribute, i.e. a static characteristic of the variable, whereas head() is a method, i.e. a function that can often take arguments.\n\n\n\n\nLet’s now learn a bit more about our data. The describe() method gives us summary statistics for our numerical data:\ngap.describe()\nTo create a customised summary, we can string different methods one after the other. Here, we first group by year to then get the yearly mean of the numerical columns, using True to indicate that we only want to consider the numeric columns:\ngap.groupby('year').mean(True)\n\n\n\nWe can visualise our data with matplotlib. First, let’s visualise the relationship between gross domestic product per capita (gdpPercap) and life expectancy (lifeExp) with a scatterplot:\nimport matplotlib.pyplot as plt\nplt.plot(gap.gdpPercap, gap.lifeExp, 'g.')\nWe add the data as two arguments, which are understood as what we put on the x and y axes respectively.\nWe can now add labels with extra functions:\nplt.plot(gap.gdpPercap, gap.lifeExp, 'g.')\nplt.xlabel('GDP per capita (USD)')\nplt.ylabel('Life expectancy (years)')\n\nMake sure that you execute all the lines of code that relate to one plot together. When you need to execute many lines together, you might want to start using cells in your script: you can start a new cell with a #%% line, and execute the current cell with the keyboard shortcut Ctrl + Enter.\n\n\n\nYou can save you plots as PNG by right-clicking on them. To save automatically with some code, you can add the following line to the visualisation block:\nplt.savefig('gdp_vs_life_exp.pdf')\nA PDF is a great option for a visualisation in vector format.\nYou can change the extension in the filename to save in a different format. For example, for a PNG file with a higher definition than the default:\nplt.savefig('gdp_vs_life_exp.png', dpi=600)\n\n\n\n\nHow can we reuse previous code to visualise how mean life expectancy evolved over the years?\nTry changing the look of the plot to a magenta dotted line.\n\n\n\n\nWe can reuse the same summary as before, but adding the attribute of the right column we are interested in:\nplt.plot(gap.groupby('year').mean().lifeExp, 'm:')",
    "crumbs": [
      "Workshops",
      "Fundamentals"
    ]
  },
  {
    "objectID": "Workshops/Fundamentals.html#saving-your-work",
    "href": "Workshops/Fundamentals.html#saving-your-work",
    "title": "Fundamentals",
    "section": "",
    "text": "Your project can be reopened from the “Projects” menu in Spyder.\nBy default, your variables are not saved, which is another reason why working with a script is important: you can execute the whole script in one go to get everything back. You can however save your variables as a .spydata file if you want to (for example, if it takes a lot of time to process your data).",
    "crumbs": [
      "Workshops",
      "Fundamentals"
    ]
  }
]