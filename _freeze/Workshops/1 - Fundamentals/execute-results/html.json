{
  "hash": "4e23758e8e308e44ec15bbbdccf0b6ea",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: The Fundamentals\neditor: source\ndate: today\n---\n\nIn this workshop, we will learn about:\n\n* The main features of the RStudio IDE\n* The basic building blocks of the R language\n* What functions are\n* Creating different kinds of objects to store data\n* Importing a dataset\n* Some built-in visualisation and statistics functions\n* Extending R with packages\n* Finding help and learning more\n\n## Maths and objects\n\nThe **console** (by default at the bottom left in RStudio) is where most of the action happens. In the console, we can use R interactively. We write a **command** and then **execute** it by pressing <kbd>Enter</kbd>.\n\nIn its most basic use, R can be a calculator. Try executing the following commands:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 - 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n\n```{.r .cell-code}\n3 * 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n\n```{.r .cell-code}\n2 + 10 / 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\nThose symbols are called \"binary operators\": we can use them to multiply, divide, add and subtract. Once we execute the command (the \"input\"), we can see the result in the console (the \"output\").\n\nWhat if we want to keep reusing the same value? We can store data by creating **objects**, and assigning values to them with the **assignment operator** `<-`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum1 <- 42\nnum2 <- num1 / 9\nnum2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.666667\n```\n\n\n:::\n:::\n\n\n> You can use the shortcut <kbd>Alt</kbd>+<kbd>-</kbd> to type the assignement operator quicker.\n\nWe can also store text data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsentence <- \"Hello World!\"\nsentence\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello World!\"\n```\n\n\n:::\n:::\n\n\nYou should now see your objects listed in you **environment pane** (top right).\n\nAs you can see, you can store different kinds of data as objects. If you want to store text data (a \"string of characters\"), you have to use quotes around them.\n\n> You can recall your recent commands with the up arrow, which is especially useful to correct typos or slightly modify a long command.\n\nUsing the console is great to test things and quickly run commands and get outputs. However, if we want to store our process and refine our code as we go over several sessions, it is best to work with a **script**. Let's do a bit more setting up of our project.\n\n## Create a folder structure\n\nTo keep it tidy, we are creating 3 folders in our project directory:\n\n* scripts\n* data\n* plots\n\nYou can do that with the \"New Folder\" button in the \"Files\" pane (bottom right of the window).\n\n## Scripts\n\nScripts are simple text files that contain R code. They are useful for:\n\n* saving a set of commands for later use (and executing it in one click)\n* making research reproducible\n* making writing and reading code more comfortable\n* documenting the code with comments, and\n* sharing your work with peers\n\nLet's create a new R script with the menu: File > New File > R Script. (This can also be done with the first icon in the toolbar, or with the shortcut <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>N</kbd>.)\n\nThis opens our fourth pane in the top left of RStudio: the **source pane**.\n\n### Comments\n\nWe should start with a couple of **comments**, to document our script. Comments start with `#`, and will be ignored by R:\n\n```r\n# Description: Introduction to R and RStudio\n# Author: <your name>\n# Date: <today's date>\n```\n\n### Syntax highlighting\n\nNow, add some commands to your script:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum1 <- 42\nnum2 <- num1 / 9\n```\n:::\n\n\nNotice the colours? This is called **syntax highlighting**. This is one of the many ways RStudio makes it more comfortable to work with R. The code is more readable when working in a script.\n\n> While editing your script, you can run the current command (or the selected block of code) by using <kbd>Ctrl</kbd>+<kbd>Enter</kbd>. Remember to save your script regularly with the shortcut <kbd>Ctrl</kbd>+<kbd>S</kbd>. You can find more shortcuts with <kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>K</kbd>, or the menu \"Tools > Keyboard Shortcuts Help\".\n\n## Functions\n\nAn R **function** is a little program that does a particular job. It usually looks like this:\n\n```\n<functionname>(<argument(s)>)\n```\n\n**Arguments** tell the function what to do. Some functions don't need arguments, others need one or several, but they always need the parentheses after their name.\n\nFor example, try running the following command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(num2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\nThe `round()` function rounds a number to the closest integer. The only argument we give it is `num2`, the number we want to round.\n\n> If you scroll back to the top of your console, you will now be able to spot functions in the text.\n\n### Help\n\nWhat if we want to learn more about a function?\n\nThere are two main ways to find **help** about a specific function in RStudio:\n\n1. the shortcut command: `?functionname`\n1. the keyboard shortcut: press <kbd>F1</kbd> with your cursor in a function name (you can do this by simply clicking on the function name)\n\nLet's look through the documentation for the `round()` function:\n\n```r\n?round\n```\n\nAs you can see, different functions might share the same documentation page.\n\nThere is quite a lot of information in a function's documentation, but the most important bits are:\n\n* **Description**: general description of the function(s)\n* **Usage**: overview of what syntax can be used\n* **Arguments**: description of what each argument is\n* **Examples**: some examples that demonstrate what is possible\n\nSee how the `round()` function has a second argument available? Try this now:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(num2, digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.67\n```\n\n\n:::\n:::\n\n\nWe can change the default behaviour of the function by telling it how many digits we want after the decimal point, using the argument `digits`. And if we use the arguments in order, we don't need to name them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(num2, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.67\n```\n\n\n:::\n:::\n\n\nTo group values together in a single object, use the `c()` function.\n\n`c()` combines the arguments into a vector. In other words, it takes any number of arguments (hence the `...`), and stores all those values together, as one single object. For example, let's store the ages of our pet dogs in a new object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nages <- c(4, 10, 2, NA, 3)\n```\n:::\n\n\n> You can store missing data as `NA`.\n\nWe can now reuse this vector, and calculate their human age:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nages * 7\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 28 70 14 NA 21\n```\n\n\n:::\n:::\n\n\nR can create visualisations with functions too. Try a bar plot of your dogs' ages with the `barplot()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(ages)\n```\n\n::: {.cell-output-display}\n![](1---Fundamentals_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nWe can customise the plot with a title and some colours, for example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(ages, main = \"How old are my dogs?\", col = \"pink\")\n```\n\n::: {.cell-output-display}\n![](1---Fundamentals_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n#### Challenge 1 – Finding help\n\nUse the help pages to find out what these functions do, and try executing commands with them:\n\n1. `rep.int()`\n1. `mean()`\n1. `rm()`\n\n`rep.int()` creates vectors like `c()`, but it is designed to easily replicate values. For example, if you find something very funny:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrep.int(\"Ha!\", 30)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\"\n[13] \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\"\n[25] \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\" \"Ha!\"\n```\n\n\n:::\n:::\n\n\nThe next function, `mean()`, returns the mean of a vector of numbers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(ages)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\nWhat happened there?\n\nWe have an NA value in the vector, which means the function can't tell what the mean is. If we want to change this default behaviour, we can use an extra argument: `na.rm`, which stands for \"remove NAs\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(ages, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.75\n```\n\n\n:::\n:::\n\n\n> In our last command, if we hadn't named the `na.rm` argument, R would have understood `TRUE` to be the value for the `trim` argument!\n\n`rm()` removes an object from your environment (`remove()` and `rm()` point to the same function). For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(num1)\n```\n:::\n\n\n> R does not check if you are sure you want to remove something! As a programming language, it does what you ask it to do, which means you might have to be more careful. But you'll see later on that, when working with scripts, this is less of a problem.\n\nLet's do some more complex operations by combining two functions:\n\n`ls()` returns a character vector: it contains the names of all the objects in the current environment (i.e. the objects we created in this R session). Notice that this function doesn't require us to provide any argument, but we still need to write the parentheses to run the function.\n\nIs there a way we could combine `ls()` with `rm()`?\n\nYou can remove *all* the objects in the environment by using `ls()` as the value for the `list` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\n```\n:::\n\n\nWe are nesting a function inside another one. More precisely, we are using the output of the `ls()` function as the value passed on to the `list` argument in the `rm()` function.\n\n### Incomplete functions\n\nIf you don't finish a function, by leaving off the last bracket `)` for example, the line of code won't necessarily give you an error, but it won't work very well.\nIf you forget to include that last bracket, R will run the code, and then wait for further instructions before giving you an output. This will appear as a `+` in the console like so:\n\n``` r\n> round(1.23\n+\n```\n\nIf you try to give any further instructions to R, it will likely just continue giving you `+` symbols, and not return anything.\nTo stop this, click on the console and press the `Esc` key on your keyboard.\n\n### More help\n\nWe've practised how to find help about functions we know the name of.\nWhat if we don't know what the function is called? Or if we want general help about R?\n\n* The function `help.start()` is a good starting point: it opens a browser of official R help.\n* If you want to search for a word in all the documentation, you can use the `??` syntax. For example, try executing `??anova`.\n* Finally, you will often go to your web browser and search for a particular question, or a specific error message: most times, there already is an answer somewhere on the Internet. The challenge is to ask the right question!\n\n## Import data\n\nLet's bring in some data. [Download our gapminder dataset](../data_sources/gapminder.csv) and save it in the `data/` folder you just created.\n\nOnce you've got the data, use the `read.csv()` command to bring it into R:\n\n```r\ngapminder <- read.csv(\"data/gapminder.csv\")\n```\n\n\n\nWhat do you think they do? Describe each one in detail, and try executing them.\n\n## Explore data\n\nWe have downloaded a CSV file from the Internet, and read it into an object called `gapminder`.\n\nYou can type the name of your new object to print it to screen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder\n```\n:::\n\n\nThat's a lot of lines printed to your console. To have a look at the first few lines only, we can use the `head()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      country year      pop continent lifeExp gdpPercap\n1 Afghanistan 1952  8425333      Asia  28.801  779.4453\n2 Afghanistan 1957  9240934      Asia  30.332  820.8530\n3 Afghanistan 1962 10267083      Asia  31.997  853.1007\n4 Afghanistan 1967 11537966      Asia  34.020  836.1971\n5 Afghanistan 1972 13079460      Asia  36.088  739.9811\n6 Afghanistan 1977 14880372      Asia  38.438  786.1134\n```\n\n\n:::\n:::\n\n\nNow let's use a few functions to learn more about our dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(gapminder) # what kind of object is it stored as?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(gapminder) # how many rows?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1704\n```\n\n\n:::\n\n```{.r .cell-code}\nncol(gapminder) # how many columns?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(gapminder) # rows and columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1704    6\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(gapminder) # variable names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"country\"   \"year\"      \"pop\"       \"continent\" \"lifeExp\"   \"gdpPercap\"\n```\n\n\n:::\n:::\n\n\nAll the information we just saw (and more) is available with one single function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(gapminder) # general structure\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t1704 obs. of  6 variables:\n $ country  : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n $ year     : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ pop      : num  8425333 9240934 10267083 11537966 13079460 ...\n $ continent: chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n $ lifeExp  : num  28.8 30.3 32 34 36.1 ...\n $ gdpPercap: num  779 821 853 836 740 ...\n```\n\n\n:::\n:::\n\n\n> The RStudio's environment panel already shows us some of that information (click on the blue arrow next to the object name).\n\nAnd to explore the data in a viewer, click on the table icon next to the object in the Environment pane.\n\nThis viewer allows you to explore your data by scrolling through, searching terms, filtering rows and sorting the data. Remember that it is only a viewer: it will never modify your original object.\n\n> Notice that RStudio actually runs the `View()` function. Feel free to use that instead of clicking on the button, but note that the case matters: using a lowercase \"v\" will yield an error.\n\nTo see summary statistics for each of our variables, you can use the `summary()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   country               year           pop             continent        \n Length:1704        Min.   :1952   Min.   :6.001e+04   Length:1704       \n Class :character   1st Qu.:1966   1st Qu.:2.794e+06   Class :character  \n Mode  :character   Median :1980   Median :7.024e+06   Mode  :character  \n                    Mean   :1980   Mean   :2.960e+07                     \n                    3rd Qu.:1993   3rd Qu.:1.959e+07                     \n                    Max.   :2007   Max.   :1.319e+09                     \n    lifeExp        gdpPercap       \n Min.   :23.60   Min.   :   241.2  \n 1st Qu.:48.20   1st Qu.:  1202.1  \n Median :60.71   Median :  3531.8  \n Mean   :59.47   Mean   :  7215.3  \n 3rd Qu.:70.85   3rd Qu.:  9325.5  \n Max.   :82.60   Max.   :113523.1  \n```\n\n\n:::\n:::\n\n\nNotice how categorical and numerical variables are handled differently?\n\nLet's now plot the relationship between GDP per capita and life expectancy:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(gapminder$gdpPercap, gapminder$lifeExp,\n     xlab = \"GDP per capita (USD)\",\n     ylab = \"Life expectancy (years)\")\n```\n\n::: {.cell-output-display}\n![](1---Fundamentals_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n> For more on visualisations, we will later dive into the popular ggplot2 package.\n\nFinally, let's fit a linear model to see how strongly correlated the two variables are:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_model <- lm(gapminder$lifeExp ~ gapminder$gdpPercap)\nsummary(linear_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = gapminder$lifeExp ~ gapminder$gdpPercap)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-82.754  -7.758   2.176   8.225  18.426 \n\nCoefficients:\n                     Estimate Std. Error t value Pr(>|t|)    \n(Intercept)         5.396e+01  3.150e-01  171.29   <2e-16 ***\ngapminder$gdpPercap 7.649e-04  2.579e-05   29.66   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 10.49 on 1702 degrees of freedom\nMultiple R-squared:  0.3407,\tAdjusted R-squared:  0.3403 \nF-statistic: 879.6 on 1 and 1702 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\nThe P-value suggests that there is a strong relationship between the two.\n\n## Packages\n\nPackages add functionalities to R and RStudio. There are [more than 21000](https://cran.r-project.org/web/packages/index.html) available.\n\nYou can see the list of installed packages in your \"Packages\" tab, or by using the `library()` function without any argument.\n\nWe are going to install a package called \"skimr\". We can do that in the Packages tab:\n\n1. Open the \"Packages\" tab (bottom-right pane)\n1. Click the “Install” button\n1. Search for “skimr”\n1. Click \"Install\"\n\n> Notice how it runs an `install.packages()` command in the console? You can use that too.\n\nIf I now try running the command `skim()`, I get an error. That's because, even though the package is installed, I need to **load** it every time I start a new R session. The `library()` function does that. Let's load the package, and use the `skim()` function to get an augmented summary of our `gapminder` dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(skimr) # load the package into your library\nskim(gapminder) # use a function from the package\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |          |\n|:------------------------|:---------|\n|Name                     |gapminder |\n|Number of rows           |1704      |\n|Number of columns        |6         |\n|_______________________  |          |\n|Column type frequency:   |          |\n|character                |2         |\n|numeric                  |4         |\n|________________________ |          |\n|Group variables          |None      |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|country       |         0|             1|   4|  24|     0|      142|          0|\n|continent     |         0|             1|   4|   8|     0|        5|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|        mean|           sd|       p0|        p25|        p50|         p75|         p100|hist  |\n|:-------------|---------:|-------------:|-----------:|------------:|--------:|----------:|----------:|-----------:|------------:|:-----|\n|year          |         0|             1|     1979.50|        17.27|  1952.00|    1965.75|    1979.50|     1993.25|       2007.0|▇▅▅▅▇ |\n|pop           |         0|             1| 29601212.33| 106157896.75| 60011.00| 2793664.00| 7023595.50| 19585221.75| 1318683096.0|▇▁▁▁▁ |\n|lifeExp       |         0|             1|       59.47|        12.92|    23.60|      48.20|      60.71|       70.85|         82.6|▁▆▇▇▇ |\n|gdpPercap     |         0|             1|     7215.33|      9857.45|   241.17|    1202.06|    3531.85|     9325.46|     113523.1|▇▁▁▁▁ |\n\n\n:::\n:::\n\n\nThis function provides further summary statistics, and even displays a small histogram for each numeric variable.\n\n> Packages are essential to use R to its full potential, by making the most out of what other users have created and shared with the community. To get an idea of some of the most important packages depending on your field of study, you can start with the [CRAN Task Tiews](https://cran.r-project.org/web/views/).\n\n### Challenge 3\n\nFor a bit of fun:\n\n* Try installing the package \"cowsay\" and using its function `say()`.\n* Have a look at the documentation and [the package's website](https://sckott.github.io/cowsay/).\n* Can you make Clippy say the current time?\n* Can you make a chicken say \"bok\" a thousand times? (Hint: look at the `paste()` function and its arguments.)\n\n## Closing RStudio\n\nYou can close RStudio after making sure that you saved your script.\n\nWhen you create a **project** in RStudio, you create an `.Rproj` file that gathers information about the state of your project. When you close RStudio, you have the option to save your **workspace** (i.e. the objects in your **environment**) as an `.Rdata` file. The `.Rdata` file is used to reload your workspace when you open your project again. Projects also bring back whatever source file (e.g. script) you had open, and your command history. You will find your command history in the \"History\" tab (upper right panel): all the commands that we used should be in there.\n\nIf you have a script that contains all your work, it is a good idea _not_ to save your workspace: it makes it less likely to run into errors because of accumulating objects. The script will allow you to get back to where you left it, by executing all the clearly laid-out steps.\n\nThe console, on the other hand, only shows a brand new R **session** when you reopen RStudio. Sessions are not persistent, and a clean one is started when you open your project again, which is why you have to load any extra package your work requires again with the `library()` function.\n\n## Resources\n\n* We have a [compilation of resources](https://github.com/uqlibrary/technology-training/blob/master/R/usefullinks.md) for the rest of your R learning\n* And a cheatsheet of [main terms and concepts for R](https://github.com/uqlibrary/technology-training/blob/master/R/terminology.md)\n",
    "supporting": [
      "1---Fundamentals_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}