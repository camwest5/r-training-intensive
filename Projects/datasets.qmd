---
title: "Datasets and tips"
data: "../data_sources/*"
---

## Project scaffold

### Task 0: Pick a dataset

We have nine datasets for you to choose from. **We recommend saving your data inside your project**.

| Dataset | Description | Source |
| --- | --- | --- |
| [World populations](../data_sources/population.csv) | A summary of world populations and corresponding statistics | Data from a [Tidy Tuesday post on 2014 CIA World Factbook data](https://github.com/rfordatascience/tidytuesday/blob/main/data/2024/2024-10-22/readme.md)
| [Soccer players](../data_sources/Players2024.csv) | A summary of approx. 6000 soccer players from 2024 | Data from a [Kaggle submission](https://www.kaggle.com/datasets/asemmustafa/football-players-2024-dataset).
| [Coffee survey](../data_sources/coffee_survey.csv) | A survey of blind coffee tasting results | Data from a [Kaggle submission](https://www.kaggle.com/datasets/sujaykapadnis/lets-do-some-coffee-tasting)
| [Gapminder](../data_sources/gapminder.csv) | GDP and life expectancy data by country | Data from the [Research Bazaar's R novice tutorial](https://github.com/resbaz/r-novice-gapminder), sourced from [Gapminder](https://www.gapminder.org/).
| [Melbourne housing data](../data_sources/melb_data.csv) | A collection of houses for sale in Melbourne. | Data from a [Kaggle submission](https://www.kaggle.com/datasets/dansbecker/melbourne-housing-snapshot) | 
| [Goodreads books](../data_sources/books.csv) | A summary of books on Goodreads. | Data from a [Kaggle submission](https://www.kaggle.com/datasets/jealousleopard/goodreadsbooks)
| [Queensland hospitals](../data_sources/hospital_data.csv) | Queensland emergency department statistics. | Data from the Queensland Government's [Open Data Portal](https://www.data.qld.gov.au/dataset/emergency-departments-quarterly-data). |
| [Queensland fuel prices](../data_sources/qld_fuel.csv) | Fuel prices by the pump in Queensland | Data from the Queensland Government's [Open Data Portal](https://www.data.qld.gov.au/dataset/fuel-price-reporting-2024)
| [Aeroplane bird strikes](../data_sources/birds_strikes.csv) | Aeroplane bird strike incidents fron the 90s| Data from a [Tidy Tuesday post](https://github.com/rfordatascience/tidytuesday/tree/2500765853ea5235409d936cf9bbbf7d5f8b6881/data/2019/2019-07-23) sourced from an [FAA database](https://wildlife.faa.gov/home)

Remember, to load the data into R we need to use the `read.csv()` function.

```r
dataset <- read.csv("path_to_data")
```

### Task 1: Understand the data

The datasets are varied with respect to variable types and content. The first exercise you should complete is a overview of the data. Use the following techniques to do so.

**Your goal: identify which variables are discrete (categorical) and which are continuous.**

#### Viewing the data structure

Use the following functions to view your data and the underlying data types.

```r
names(dataset)
str(dataset)
summary(dataset)
```

#### Picking out individual columns

To view the contents of particular columns, you can select them via indexing

```r
dataset$column_name"
unique(dataset$column_name)
summary(dataset$column_name)
```

You can also apply other statistics to the column, like `max()`.

### Task 2: Taking a subset

The datasets have lots of observations for lots of variables. To draw meaningful results, it's often useful to take a subset of those.

**Your goal: filter by a condition or group by and aggregate over a particular variable**

First, we want to load the `dplyr` library to perform data manipulation

```r
library(dplyr)
```

#### Filtering

Recall that filtering looks like indexing. If you only want to examine a certain subset of a variable, the following code will isolate that subset

```r
subset = dataset %>% filter(condition)
```

where `condition` depends on the columns. For example, `country == "Australia"`.

> Hint: we've used the pipe operator `%>%` here, which is equivalent to `filter(datatset, condition)`.

#### Grouping

If you want to aggregate over a particular variable you need to group by it. This answers questions like, what is the average $x$ for every $y$.

```r
aggregated = dataset %>%
  group_by("variable_to_group_by") %>%
  summarise(summary_1 = ..., summary_2 = ..., ...)
```

The `summarise` function aggregates by applying some statistic to a particular column for every unique value in the grouping variable. For example, `summarise(avg_pop = mean(population))` makes a column in the summary table for the average population for each value of the grouped variable.

### Task 3: Visualise the relationship between variables

With your summary dataset, you can now try to visualise your variables.

**Your goal: create a visualisation of one to three variables in your summary data**.

For visualisation, we use the `ggplot2` library.

```r
library(ggplot2)
```

Next, you'll need to identify the variables to visualise. Using `ggplot`, we then specify the data, the mappings and the graphical elements

```r
ggplot(data = aggregated,
       mapping = aes(x = ..., y = ..., ...)) +
  geom_...()
```

### Task 4: Looking ahead

Now that you've performed your first analysis and visualisation of the dataset, use these results to inform your next analysis!

Below you'll find some general tips which can help. They have dataset-specific tips too, so check them out. Otherwise, feel free to ask if you have any other questions.

## Tips

Here's a few general tips. In addition, we strongly recommend using [popular cheatsheets](https://rstudio.github.io/cheatsheets/), which give a quick and easy reference for common packages and functions, and [from Data to Viz](https://www.data-to-viz.com/), which guides you through choosing a visualisation.

### Hotkeys
| Code | Hotkey | Description |
| --- | --- | --- |
|  | <kbd>Ctrl</kbd>+<kbd>Enter</kbd> | Run current line (when in Script) |
| `<-` | <kbd>Alt</kbd>+<kbd>Enter</kbd> | Assignment |
| `%>%` | <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>M</kbd> | Pipe |
|  | <kbd>Esc</kbd> | Cancel current operation (when in Console) |
|  | <kbd>F1</kbd> | Help documentation for selected function |

### Data manipulation

#### Importing and exporting data
In case you've forgotten, use the `read.csv()` function to import data:

```r
dataset <- read.csv("data/dataset.csv")
```

If you'd like to export any files from R to ".csv", use `write.csv()`

```r
write.csv(dataset, "data/output_name.csv")
```

#### Initial exploration
You'll want to explore the data to start with - below are a few functions to get started.

| Function | Example | Description |
| --- | --- | --- |
| `names()` | `names(dataset)` | Returns the variable names | 
| `str()` | `str(dataset)` | Returns the structure of the dataset (variable names, types and first entries) | 
| `$` | `dataset$variable` | Returns a specific variable |
| `unique()` | `unique(dataset$variable)` | Returns the unique values of a variable |
| `summary()` | `summary(dataset$variable)` | Returns a statistical summary of a variable |

#### Removing `NA`s

We can use the `dplyr` package to remove rows which have NA:

```r
library(dplyr)

dataset <- dataset %>%
  filter(!is.na(variable_to_check_for_NAs))
```

> We use the exclamation mark `!` to negate the result, because `is.na` returns all the rows that *are* `NA`.

#### Time series data
If you've picked a dataset with time-series data (e.g. a "date" variable), you should transform that variable so that it visualises better:

```r
dataset$variable <- as.Date(dataset$variable)
```

#### Categorical and ordered data
If you're dealing with categorical data, it can be helpful to tell R that it has levels:

```r
dataset$variable <- factor(dataset$variable)
```

To manually specify the order to R, send in an ordered list of the levels joined with `c()`:

```r
dataset$variable <- factor(dataset$variable, levels = c("first_val", "second_val", ... ))
```

> This is particularly useful for the **Coffee survey** dataset.

Alternatively, if you only need to specify the first (reference) level, use

```r
dataset$variable <- factor(dataset$variable)
dataset$variable <- relevel(dataset$variable, ref = "reference_level")
```

#### Renaming variables
Some datasets have cumbersome names for their variables. We can change variable names with

```r
df <- df %>% 
  rename(new_name = old_name)
```

> This is particularly useful for the **World population** dataset.

### Visualisation
We use the `ggplot()` function with geometries to create visualisations

```r
library(ggplot2)

ggplot(data = dataset,
       mapping = aes(x = ..., y = ..., colour = ..., ...)) +
  geom_first_layer() + 
  geom_second_layer() + 
  ...
```

Take a look at the [ggplot2 documentation](https://ggplot2.tidyverse.org/) for more information.

#### Plotly workaround

If you're having issues using `ggplotly` (it's producing a blank plot), you can use this workaround to view it in your browser.

```r
plot <- ggplotly(saved_ggplot_image)
htmlwidgets::saveWidget(as_widget(plot), "plots/name_of_plot.html")
```

Opening that file will show you the image.